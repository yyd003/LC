java:

class Solution {
    public int strStr(String haystack, String needle) {
        if(needle.length()==0)  return 0;
        if(needle.length()>haystack.length())  return -1;
        // if(haystack == null || needle == null){
        //     return -1;
        // }
        int i, j;
        for(i = 0; i <= haystack.length()-needle.length(); i++){
            for(j = 0; j < needle.length();j++){
                if(i + j  == haystack.length()) break;
                else if(haystack.charAt(i+j)!=needle.charAt(j))  break;
            }
            if(j==needle.length())  return i;
        }
        return -1;
    }
}

/*
*Runtime: 2 ms, faster than 52.00% of Java online submissions for Implement strStr().
*Memory Usage: 38.3 MB, less than 59.61% of Java online submissions for Implement strStr().
*/

return haystack.indexOf(needle);

/*
*Runtime: 0 ms, faster than 100.00% of Java online submissions for Implement strStr().
*Memory Usage: 38.1 MB, less than 69.16% of Java online submissions for Implement strStr().
*/

python:
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle in haystack:
            return haystack.index(needle)
        return -1
/*
*Runtime: 24 ms, faster than 96.66% of Python3 online submissions for Implement strStr().
*Memory Usage: 14.1 MB, less than 28.19% of Python3 online submissions for Implement strStr().
*/

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if len(needle) == 0:
            return 0;
        if len(haystack) == 0:
            return -1;
        if haystack == needle:
            return 0
        for i in range( len(haystack) - len(needle) + 1):
            if  haystack[i : i + len(needle)] == needle:
                return i;
        return -1
 /*
*Runtime: 28 ms, faster than 88.95% of Python3 online submissions for Implement strStr().
*Memory Usage: 13.8 MB, less than 93.45% of Python3 online submissions for Implement strStr().
 */
