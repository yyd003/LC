https://leetcode.com/problems/implement-strstr/
Java:

class Solution {
    public int strStr(String haystack, String needle) {
        if(needle.length()==0)  return 0;
        if(needle.length()>haystack.length())  return -1;
        // if(haystack == null || needle == null){
        //     return -1;
        // }
        int i, j;
        for(i = 0; i <= haystack.length()-needle.length(); i++){
            for(j = 0; j < needle.length();j++){
                if(i + j  == haystack.length()) break;
                else if(haystack.charAt(i+j)!=needle.charAt(j))  break;
            }
            if(j==needle.length())  return i;
        }
        return -1;
    }
}

/*
*Runtime: 2 ms, faster than 52.00% of Java online submissions for Implement strStr().
*Memory Usage: 38.3 MB, less than 59.61% of Java online submissions for Implement strStr().
*/

return haystack.indexOf(needle);

/*
*Runtime: 0 ms, faster than 100.00% of Java online submissions for Implement strStr().
*Memory Usage: 38.1 MB, less than 69.16% of Java online submissions for Implement strStr().
*/

class Solution {
    public int strStr(String source, String target) {
         if(source == null || target == null){
            return -1;
        }
        
        int t_l = target.length();
        if(t_l == 0){
            return 0;
        }
        
        int BASE = 10^6;
        int power = 1;
        for (int i = 0; i < t_l ; i++){
            power = (power * 31) % BASE;
        }
        
        int targetCode = 0;
        for (int i = 0; i < t_l ; i++){
            targetCode = (targetCode * 31 + target.charAt(i)) % BASE;
        }
        
        int s_l = source.length();
        int hashCode = 0;
        for (int i = 0; i < s_l ; i++){
            hashCode = (hashCode * 31 + source.charAt(i)) % BASE;
            if(i < t_l - 1){
                continue;
            }
            if(i > t_l -1){
                hashCode = (hashCode - source.charAt(i - t_l) * power) % BASE;
                if(hashCode < 0){
                    hashCode += BASE;
                }
            }

            if(hashCode == targetCode){
                if(source.substring(i - t_l + 1, i + 1).equals(target)){
                    return i - t_l + 1;
                }
            }
        }
        
        return -1;
    }
}

Runtime: 2 ms, faster than 51.17% of Java online submissions for Implement strStr().
Memory Usage: 37.6 MB, less than 62.92% of Java online submissions for Implement strStr().

class Solution {
    public int strStr(String haystack, String needle) {
        if(needle.length()==0 || haystack.equals(needle))  
            return 0;
        if(needle.length() > haystack.length())  
            return -1;
        int i;
        int nlen = needle.length();
        for(i = 0; i <= haystack.length() - nlen; i++){
            if(haystack.substring(i, i + nlen).equals(needle))  return i;
        }
        return -1;
    }
}
/*
*Runtime: 0 ms, faster than 100.00% of Java online submissions for Implement strStr().
*Memory Usage: 39.3 MB, less than 47.36% of Java online submissions for Implement strStr().
*/

class Solution {
    public int strStr(String haystack, String needle) {
        if(haystack == null || needle == null){
            return -1;
        }
        
        return KMP(haystack, needle);
        
    }
            protected int[] getNext(char[] p) {
            // 已知next[j] = k,利用递归的思想求出next[j+1]的值
            // 如果已知next[j] = k,如何求出next[j+1]呢?具体算法如下:
            // 1. 如果p[j] = p[k], 则next[j+1] = next[k] + 1;
            // 2. 如果p[j] != p[k], 则令k=next[k],如果此时p[j]==p[k],则next[j+1]=k+1,
            // 如果不相等,则继续递归前缀索引,令 k=next[k],继续判断,直至k=-1(即k=next[0])或者p[j]=p[k]为止
            int pLen = p.length;
            int[] next = new int[pLen];
            int k = -1;
            int j = 0;
            next[0] = -1; // next数组中next[0]为-1
            while (j < pLen - 1) {
                if (k == -1 || p[j] == p[k]) {
                    k++;
                    j++;
                    next[j] = k;
                } else {
                    k = next[k];
                }
            }
            return next;
        }

        private int KMP(String source, String pattern) {
            int i = 0, j = 0;
            char[] src = source.toCharArray();
            char[] ptn = pattern.toCharArray();
            int sLen = src.length;
            int pLen = ptn.length;
            if(pLen == 0){
                return 0;
            }
            int[] next = getNext(ptn);
            while (i < sLen && j < pLen) {
                // 如果j = -1,或者当前字符匹配成功(src[i] = ptn[j]),都让i++,j++
                if (j == -1 || src[i] == ptn[j]) {
                    i++;
                    j++;
                } else {
                    // 如果j!=-1且当前字符匹配失败,则令i不变,j=next[j],即让pattern模式串右移j-next[j]个单位
                    j = next[j];
                }
            }
            if (j == pLen)
                return i - j;
            return -1;
        }
}

Runtime: 2 ms, faster than 51.17% of Java online submissions for Implement strStr().
Memory Usage: 39 MB, less than 32.39% of Java online submissions for Implement strStr().

Python3:
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle in haystack:
            return haystack.index(needle)
        return -1
/*
*Runtime: 24 ms, faster than 96.66% of Python3 online submissions for Implement strStr().
*Memory Usage: 14.1 MB, less than 28.19% of Python3 online submissions for Implement strStr().
*/

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if len(needle) == 0:
            return 0;
        if len(haystack) == 0:
            return -1;
        if haystack == needle:
            return 0
        for i in range( len(haystack) - len(needle) + 1):
            if  haystack[i : i + len(needle)] == needle:
                return i;
        return -1
 /*
*Runtime: 28 ms, faster than 88.95% of Python3 online submissions for Implement strStr().
*Memory Usage: 13.8 MB, less than 93.45% of Python3 online submissions for Implement strStr().
 */
